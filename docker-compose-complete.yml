version: '3.8'

services:
  # =====================================
  # DATA INGESTION LAYER (Kafka)
  # =====================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - bigdata-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - bigdata-network

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.4.0
    hostname: kafka-connect
    container_name: kafka-connect
    depends_on:
      - kafka
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    networks:
      - bigdata-network

  # =====================================
  # STORAGE LAYER (HDFS + Hive)
  # =====================================
  namenode:
    image: apache/hadoop:3
    hostname: namenode
    container_name: namenode
    command: ["hdfs", "namenode"]
    ports:
      - "9870:9870"
      - "8020:8020"
    env_file:
      - ./hadoop.env
    environment:
      ENSURE_NAMENODE_DIR: "/tmp/hadoop-root/dfs/name"
    volumes:
      - namenode_data:/tmp/hadoop-root/dfs/name
    networks:
      - bigdata-network

  datanode1:
    image: apache/hadoop:3
    hostname: datanode1
    container_name: datanode1
    command: ["hdfs", "datanode"]
    env_file:
      - ./hadoop.env
    volumes:
      - datanode1_data:/tmp/hadoop-root/dfs/data
    networks:
      - bigdata-network

  datanode2:
    image: apache/hadoop:3
    hostname: datanode2
    container_name: datanode2
    command: ["hdfs", "datanode"]
    env_file:
      - ./hadoop.env
    volumes:
      - datanode2_data:/tmp/hadoop-root/dfs/data
    networks:
      - bigdata-network

  resourcemanager:
    image: apache/hadoop:3
    hostname: resourcemanager
    container_name: resourcemanager
    command: ["yarn", "resourcemanager"]
    ports:
      - "8088:8088"
    env_file:
      - ./hadoop.env
    volumes:
      - resourcemanager_data:/tmp/hadoop-root/logs
    networks:
      - bigdata-network

  nodemanager:
    image: apache/hadoop:3
    hostname: nodemanager
    container_name: nodemanager
    command: ["yarn", "nodemanager"]
    env_file:
      - ./hadoop.env
    volumes:
      - nodemanager_data:/tmp/hadoop-root/logs
    networks:
      - bigdata-network

  # Hive Metastore Database
  postgres-hive:
    image: postgres:13
    hostname: postgres-hive
    container_name: postgres-hive
    environment:
      POSTGRES_DB: metastore
      POSTGRES_USER: hive
      POSTGRES_PASSWORD: hive123
    volumes:
      - postgres_hive_data:/var/lib/postgresql/data
    networks:
      - bigdata-network

  # Hive Metastore
  hive-metastore:
    image: apache/hive:3.1.3
    hostname: hive-metastore
    container_name: hive-metastore
    depends_on:
      - postgres-hive
      - namenode
    environment:
      SERVICE_NAME: metastore
      DB_DRIVER: postgres
      SERVICE_OPTS: -Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver
        -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://postgres-hive:5432/metastore
        -Djavax.jdo.option.ConnectionUserName=hive
        -Djavax.jdo.option.ConnectionPassword=hive123
    ports:
      - "9083:9083"
    networks:
      - bigdata-network

  # =====================================
  # PROCESSING LAYER (Spark)
  # =====================================
  spark-master:
    image: bitnami/spark:3.4
    hostname: spark-master
    container_name: spark-master
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./data:/opt/spark-data
    networks:
      - bigdata-network

  spark-worker1:
    image: bitnami/spark:3.4
    hostname: spark-worker1
    container_name: spark-worker1
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 2G
      SPARK_WORKER_CORES: 2
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./data:/opt/spark-data
    networks:
      - bigdata-network

  spark-worker2:
    image: bitnami/spark:3.4
    hostname: spark-worker2
    container_name: spark-worker2
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 2G
      SPARK_WORKER_CORES: 2
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./data:/opt/spark-data
    networks:
      - bigdata-network

  # =====================================
  # QUERY ENGINE (Trino)
  # =====================================
  trino:
    image: trinodb/trino:422
    hostname: trino
    container_name: trino
    ports:
      - "8090:8080"
    volumes:
      - ./trino-config:/etc/trino
    networks:
      - bigdata-network

  # =====================================
  # ORCHESTRATION (Airflow)
  # =====================================
  postgres-airflow:
    image: postgres:13
    hostname: postgres-airflow
    container_name: postgres-airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    networks:
      - bigdata-network

  airflow-init:
    image: apache/airflow:2.7.0
    hostname: airflow-init
    container_name: airflow-init
    depends_on:
      - postgres-airflow
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: bash -c "airflow db init && airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin123"
    networks:
      - bigdata-network

  airflow-webserver:
    image: apache/airflow:2.7.0
    hostname: airflow-webserver
    container_name: airflow-webserver
    depends_on:
      - airflow-init
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    ports:
      - "8081:8080"
    command: airflow webserver
    networks:
      - bigdata-network

  airflow-scheduler:
    image: apache/airflow:2.7.0
    hostname: airflow-scheduler
    container_name: airflow-scheduler
    depends_on:
      - airflow-init
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: airflow scheduler
    networks:
      - bigdata-network

  # =====================================
  # POWERBI AUTOMATION SERVICE
  # =====================================
  powerbi-automation:
    build:
      context: .
      dockerfile: Dockerfile.powerbi
    hostname: powerbi-automation
    container_name: powerbi-automation
    environment:
      - POWERBI_CLIENT_ID=${POWERBI_CLIENT_ID}
      - POWERBI_CLIENT_SECRET=${POWERBI_CLIENT_SECRET}
      - POWERBI_TENANT_ID=${POWERBI_TENANT_ID}
      - DATABASE_URL=postgresql://powerbi:powerbi123@postgres-powerbi:5432/powerbi
    volumes:
      - ./powerbi-config:/app/config
      - ./data/output:/app/data
    ports:
      - "5000:5000"
    networks:
      - bigdata-network

  # PowerBI Data Database
  postgres-powerbi:
    image: postgres:13
    hostname: postgres-powerbi
    container_name: postgres-powerbi
    environment:
      POSTGRES_DB: powerbi
      POSTGRES_USER: powerbi
      POSTGRES_PASSWORD: powerbi123
    volumes:
      - postgres_powerbi_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - bigdata-network

  # =====================================
  # MONITORING & VISUALIZATION
  # =====================================
  streamlit-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    hostname: streamlit-dashboard
    container_name: streamlit-dashboard
    ports:
      - "8501:8501"
    volumes:
      - ./data:/app/data
      - ./config:/app/config
    networks:
      - bigdata-network

networks:
  bigdata-network:
    driver: bridge

volumes:
  namenode_data:
  datanode1_data:
  datanode2_data:
  resourcemanager_data:
  nodemanager_data:
  postgres_hive_data:
  postgres_airflow_data:
  postgres_powerbi_data:
